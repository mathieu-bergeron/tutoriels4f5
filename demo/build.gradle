plugins {
    id 'java'
    id 'eclipse'
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

eclipse {
    classpath {
        file {
            whenMerged {
                classpath ->
                    def jre = entries.find { it.path.contains 'org.eclipse.jdt.launching.JRE_CONTAINER' }
                    jre.accessRules.add(new org.gradle.plugins.ide.eclipse.model.AccessRule('0', 'javafx/**'))

                    /*
                    def ntro = entries.find { it.path.contains 'ntro' }
                    entries.remove ntro
                    entries += new org.gradle.plugins.ide.eclipse.model.Library(fileReference(file(ntro.publication.path)))
                    */
            }
        }
    }
}


repositories {
    jcenter()
}

dependencies {
    testImplementation 'junit:junit:4.13'

    //implementation 'ca.ntro4f5:ntro:0.4' 
    implementation project(':ntro')

    // Json serialization
    // https://github.com/google/gson
    implementation 'com.google.code.gson:gson:2.8.5'

    // Websocket
    // https://github.com/TooTallNate/Java-WebSocket
    implementation 'org.java-websocket:Java-WebSocket:1.4.0'

}

tasks.clean {
    doFirst {
        new File("${project.projectDir}/build").deleteDir()
        new File("${project.projectDir}/bin").deleteDir()
        new File("${project.projectDir}/entrepot").deleteDir()
    }
}

task demo (type:JavaExec) {
    dependsOn 'classes'
    main = 'demo.client.Main'
    classpath = sourceSets.main.runtimeClasspath
    jvmArgs('-Dfile.encoding=UTF-8')
}

task demoAccueil (type:JavaExec) {
    dependsOn 'classes'
    main = 'demo.client.pages.accueil.PageAccueil'
    classpath = sourceSets.main.runtimeClasspath
    jvmArgs('-Dfile.encoding=UTF-8')
}

task demoParametres (type:JavaExec) {
    dependsOn 'classes'
    main = 'demo.client.pages.parametres.PageParametres'
    classpath = sourceSets.main.runtimeClasspath
    jvmArgs('-Dfile.encoding=UTF-8')
}

task demoSauvegardes (type:JavaExec) {
    dependsOn 'classes'
    main = 'demo.client.pages.sauvegardes.PageSauvegardes'
    classpath = sourceSets.main.runtimeClasspath
    jvmArgs('-Dfile.encoding=UTF-8')
}

task serveur (type:JavaExec) {
    dependsOn 'classes'
    main = 'demo.serveur.Main'
    classpath = sourceSets.main.runtimeClasspath
    jvmArgs('-Dfile.encoding=UTF-8')
}

